#!/usr/bin/env ruby

what = { "A" => "Rock",
 		 "B" => "Paper",
 		 "C" => "Scissors",
 		 "X" => "Rock",
 		 "Y" => "Paper",
 		 "Z" => "Scissors" }

same_shapes = [ "AX","BY","CZ"]
wins = [ "AY", "BZ", "CX" ]
score = 0
game_index = 0
# I need to...
outcome_map = { "X" => "lose", "Y" => "draw", "Z" => "win" }
# X Lose
# Y Draw
# Z Win

part = 2

"CZBYCXBZCYBYCZCZBYBXCYBYBZAZAYBXCYCZBZAYCYCZAYCZBXBYBYAYCZBYBYBYCZCYBXCYAZCYBXBZCZCZBXAYAYCZCZCZBYCYBYCZCZAZBYCYBXAYCYBYCZAYBYBYBYBZCYAXCYBYCZAZBXCZCXAYCYBZCYCZBXCZCYBYBYBYBYAYCZCZBYBYCZBZBYBYBYAYBZBYCYBXBYBXCZBXCYBZCZCZBYBZCZBXCYBYCYCZCYBZCZBXBYCYBXBZBYCYBXCYCZBYBYBXCYCZCZBXCYCZBYBZCYCYCZCYCZBYBYCZCYCYCYBYBYAYCZBXBYCZCZCZBYBZCYCXBYCZCZBYCZCZCZBZCYBYBXCZBXBXBYCZBXCZBZCZBXAYBXAYAYAZCYBZBZBXCYCYBYCZBXCZBYBZCZCZBYCYBYCYAYCZCYCYBYBZCYBXBZAZCYBXBYBYBYBZCZAXBZBXCYBZBYAYCZBXCZBZCZBYCZCYBXCZCYBYCZCYCZCYBZAYBYBXCYAXCZAYCZBYCZBYCZBYBYBYBYAYCZBYAZBZCYBYBZAYCZBYBYCZAZBXAYCZBZBZBYBXAYBYAXCXBZBYCYCZCYCZBYBZCYAZCYCYCYAZCYCZCZCZCXBYBYCYCZCYBYCYCZCZBZBYBYBYCZCYBXCYBZBYBYBYCYCYCZCZCYBXCYBYBZBZBZCZBXCYCXCYBXCZAYAYBXCZAZCYCZAYCZBYBYCYBYCYBYCYBYCYCYBYCZBZCYAYCYAYBXCYAYBZBYCYBYCYBYCYCZCYCZBYCYCZBYBZCYAYCZCZCZBZCYAYBZAYBYCYCZCYAYBXAZCZCYBXCZAXCZCYCZBYCYCYBYCYCZCYCYCYAYCZCYCZCZBXAYBXBYAYBYAYCZAYCYCYBYCYBZCYCZBZBYBXBYBYCYCYBYBXCZBXBXAYBZBXAYCYCYBXBZCYBYBXBXCYCZBYBYBYAYAYCZCZCYBXCYCYBZBZAXCYCYAZAYBXBYCYBYCZBYCYBYCZCXCZAZBXAZCZBYCYBZCYBXCYCZBYAYCYCYBZBYBXCZBYCYCYCYAZBYBYCYBYCZBYCYBYCZBXCYBYBXCYCZCYBXBYCYBZBXCYBXBYBZCYBYCYBYBYCYBZBYCZCZBXAXCZBZBYBXCZCZBZAZBYCYCZCYCYCYCZBYBYCYCZCZCYCYCZBYCYBYBYAYCYAYCZCYCZCXBXCZAYBXCZCZCYBZBYAYCZBXBYBZBXCYBYCZCZCZCYAYCZCZBYBYBYCYCYCZBXCYCYCYBYCXBYBYCYAZCYCZAYCYBZCYCZAXBXCZCYBYCYCYBYCZCXCYCYBXCYBYCYCZAZBXBXCZCYBYBZBYBZAXBXBXBXCYAXCZCZBYBXBYBYCZBZCYCYBXBZCXAXBYCXCXBYCZCZCZBXBZCYBYAYCZBZAZBXBXBXBYBXBXBXBYCZCYCYCYAYCZCYCZCYBYAXAZAZCZBZBZBYCZBYBXBYBZAYBYBYBZCYBYCYBYCYBZCZBZCYBZBYBYAYCZBYBXBYBXCZCYBZCZCZAZCZBXCZCZCZCYBYBXCYCYCZCZBXCYCZBZAYAYBYCYBZAXCXCYAYBZBXCZCYBYCZCYBZCZCZCYBXCZCYBYCYCYCZBXCYCZCZCYCYBYCYBXCZBZBXAZCZBZCZCYBXCZAZAYAYCYBYBXCYCZBXAYBYBXBXCYBYCYCZBYBXCYBYBXAYBYBYCYAYBYAZCZAXCZCXCZCZCYBZBZAZAYBYBYCXCZCZBZAXCYCZAYAYBXCZBZAXCZCYBXCYCYCZCZBXCZAYBYBXBYCYBXCYBYAXCZCYCZBZCYCYCZCZAYCZBYCZCYBYCYAYCYAZCYAZCZCZBYCZCYAYCYAYCZBZBYBZCZBYAZBYCZAYBYAZBXBZBXBYBYBYCYCZBYCXBYAXBYBYCZCZAXCZCYCZBYBYBXBXAXBXBYBYCZBZBYBYBZBYCZCZBXBZAZBZCZBZCYCZCZBXCYCYBXBYCYBYCZCYBYBXAZCZCYCYBZBXAZBZCZCZBXBXCZCYBZCZCZBXCYCYBYCYBZCZAYBXCYCZBYBXBXAZBYBYCZBXAYAXCYBZBXAYBYBXCZCZCZCZCZAYCYCZCYCZCYAYBYCYCYBYCZAXBYCYCZBYCZBYAZBXBXAYBXCYBZBYBZCYAYCZAYAYCZCZCYBXAYCXCYCXCZBYBYCZBXBYCZBXCZCZBYAYBXBYCZBYCZAYBXCZCYAYCZAYCYAYCZBXBYBZAYCZCYCZBZCZCYCYBZCZCYBXBYAYAYBXCYCYCZBYBZBXBYBYBZBYBYBZBYBXCYCYCZBXCZCYAYCYCZBYAZCYCZBXAYCYCYCYAYAYCYBXCZAYCXBYCYBYCYBZCYAZBYAYAYBXBYBYBYCYBZCZBXBXBXCYBXCZBZCZBYCYCZCYCYBYBYBZBYCZBYBXCZAZCYCYCZBYAYCZCYBZCZBYBZBXCYBXCZBZCZCZBYBXBXCXCZCZAYCZCYCYCYCZCYBXBXBXCXCYBXBXBXBZAZBXCYBYCZAZBYBXBZCYBZBYAZCZBYCYBYBXCYAZCZCYBYBXCYCZCYCZBYAZBYBXCYCYAXBXCYCZAZCZCYCZBYBYCZAYCZBXBXBYBYBXBXBXBZBXAXAYCZCYAYCYCZCYBYCZAYBXBXCYCYBZBZBZBYBYBYBYCYCZBZAYBZCYCYCZBXAYCYBXBZAYCYCZAXCZBXBXBZAYCZBZCZAYAYBYBYAYCYAYBXCYCZBYBZCZCYBYCYCZBYCZCYAYCYCYBXCYBYBYBXCZBYCYCYBYBYBZCYCZAXCZCYCYCYBZCYCYCYAYCYAYCYCYCYCYCYCYAZBZBYCZBYCZBYCZBYCZCZCZCYCZBYBYCYCZBZCYAYCYCZCYCYAZBYCYBXBYCYCZBYCYBXBXBYCYBZBYAYBYBYBXCZBZBXCZAZBZCYCZCYBXCYCXBZCYCYBYCXBYCZAZCXAYBYBYCZCZBYBYBZCZCYCZBXAZCYCYBZBXBYBXAZCYBYCZAYBZCYBXBXBYBYBZBXCZCYBXBXBXBYBXBXBYBYBYCYAZCZCYBYBYBZCZCYCXBZAXCYBXBYCYAXCYCYBYBYBYAZCYCYAXCYAZCZBXAYCZBZBYBYCYBYCZBXCZBXAYCZCYBXBZBYBXCYCZCZAZBZBZCZCYCZCYBZBYBYCYCZCYCYCZAYBYAZBZCZBXAYBYCYCZAYCYBYBXCYBYCYAYCYBYBZCZBXBXCZCYCZBYCYBYBYCZCYAZBZBXCZCXCZBXCZCYBXBYBYCZCZCZBYBYAXBXCZCYCZBYCYBYCYCZCZCYCYBXBYBYCYBYAYBYBZCZCZAZCZBZBYCZBYBXBYAYAYBYCYBZBYBYBYBXBXBXBZBZCZAXCZBYCZAYCZCYAYBZBYCZBYBXBZCYCZCZCYBXBXCYCYAYCYBYCYCYCYBXCZBYCZBYBYAYBYCXBYCYBYCZCYBXBYCYBYBZBXCZAXCYCYBXBZBXCYCYAYBYCYCZBYBYBZAYBZBXBZCYBYCYCYBXBYAYCYCZCYBXBXCYBYAZCXCZBYCZCYCZCYAZBYCYBZBYBXBYBXCZCYBYCYCZCZBYBXCYCYBYBXCZBXCZCYBYCYCZCYBYCZAZAYCYAYCYBYBYBYCYCZCYCYBXBXCYBXCYAYBYBYCZCZBXCZCZBYCZCZBZBZCYAZCZCZBXCZBZBYAYBXBZAYBYBYBXBYCYAZBYCYAYCYBYCYCYAYCYBYBYBZCZCZCYBYCYBZBXCYCYBYBZBYAYAYAZCYBYBYCZCZCYCZCYBXCZCYCYAYBZCZAYBZBYBYBYBYCYCYAYCZCZAZBYBXBZAZCZBXBYAXCYBZAYCZCYAYBXCYBXCZBXBYBXAZBYCZCYBYAYBXCYBZBXAZAYCYCZCYBXCYCZBYAYCYCZCXBYCYBXBZBYCZCZCYBXCYBZCZCYCYCYCZCYBYCYAYCYBXBYAXBYBYBYAYBXBZBZCZAZCXBZBYCYCZBZBYBXCYCXCYCZAXBXBYBYCZBXBZBXBXBYCYBYBZCYCYBZBYCYCYCZCZCZBYBZCYAZCXBYCYCYBYCXCYBYCYBYBYCYCZCZCZCZBXCZCZBYCYAZBXCZBZCYCYBYBYBZCYBZCZBYCZCZBXBZCYCYCZBXCZBXCYCYBXCZCZBYCZBYBYCYCYBYCYBYAZBYBYBZCYBZBYCYBXBZBZCYCZCZBZCYBYCZBXBXCZBXCYBYCYCZCZCYCZBZCYCZCXBZBYAZCZAYCZBZBXCYBXCYCZCZBYBYBXCYCZBXCYCXCYCYCZCZBXCZBYCYBYBYBYBZCZAYBXAXAZCZAZBZCXBZBXBYBXCYCZCYBXBYBXBYAYCZBYCXBYBYAZBYCZCZAZCYBZCYBYAYAZBYBZBXBYBYCYCZAYCZAYCZCYCYBYBZCYCZBYCYCYBXBYCZCZCYBZBYCZBXCZBZCYCYCYCZBYCYCYBYCXCZBYCZAYCYCYCZCYCZBZBYCZCZCYBXBYCZBYCZCZBYCYBXBYAYBXCZBYCZCYCZBXBYCYCZCYBYBZBXBYCZCZCZBZCYCZBZCZAYCZBXBZCYCZCYBZBYCYBZAYBXCYCYBYBYCYCXBZBXCXCYBZCZAYBZBZBZBXBYBXCZCZAZBZCZCZBXAYCYBYBYBYBYBYCZCYCXCYBYBYCYCZBYAXAYBXAXCYCZCZBYBZAYAYCYBZCZCYBYCYBXBXBXCZBYCYBZCZAXAYCYBYBYAZBXCZCZBXCZCZCZCYCZBXBXCYBZAYCZBYCZCYAYCZAZCZBZAYAYCZBYCYCZCZBYCZCZCZBZCYCYBYCYCZAXCZCZCYCZBYCYBYAYCYAYBYBYCZCZCZBXBYBYCYCZCYBXBYCYCZCZCZAYCYCZBXCYCZAYBYCYCYAXCZBZBXCZCYBYBYCYAYBYBYCYBXCZCZCYCYBYCZCYCZCZCZBYCZBYBYBYBXAYCYCYBXBXCZBXCZBXBYCZBXBYCZBXBYCYBYBYCXBYBYBXCYCYAZBYCYBZBXBXAYAYBZBXBXCYCYCYBYCYBYAY".scan(/.{2}/).each { |game|
	game_index += 1
	their_shape = game[0,1]
	my_shape = nil
	real_game = game
	if part == 1
		my_shape = game[1,1]
	else
		my_outcome = game[1,1]
		if my_outcome == "Y"
			same_shapes.each { |ss|
				my_shape = ss[1,1] if ss[0,1] == their_shape
			}
		else
			case their_shape
				# Rock
				when "A"
					case my_outcome
						when "X" # Lose
							my_shape = "Z"
						when "Z" # Win
							my_shape = "Y"
					end
				# Paper
				when "B"
					case my_outcome
						when "X" # Lose
							my_shape = "X"
						when "Z" # Win
							my_shape = "Z"
					end
				# Scissors
				when "C"
					case my_outcome
						when "X" # Lose
							my_shape = "Y"
						when "Z" # Win
							my_shape = "X"
					end
			end
		end
		real_game = "#{their_shape}#{my_shape}"
	end

	shape_score = "XYZ".index(my_shape) + 1
	result_score = same_shapes.include?(real_game) ? 3 :0
	result_word = "draw"
	if (result_score == 0)
		result_score = 6 if wins.include?(real_game)
		result_word = (result_score == 6) ? "win" : "lose" 
	end
	result_score += shape_score
	if part == 1
		puts "Game [#{sprintf('%4d',game_index)}] : They had '#{what[their_shape]}' (#{their_shape}) - I had '#{what[my_shape]}' (#{my_shape} - shape score #{shape_score}) ; I #{result_word} - score add is #{result_score}"
	else
		puts "Game [#{sprintf('%4d',game_index)}] : They had '#{what[their_shape]}' (#{their_shape}) and I needed to #{outcome_map[my_outcome]}, so I picked '#{what[my_shape]}' (#{my_shape} - shape score #{shape_score}) ; I #{result_word} - score add is #{result_score}"
	end

	score += result_score
}
puts score
